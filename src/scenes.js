// src/scenes.js
const { Scenes, Markup } = require('telegraf');
const { log } = require('./helpers');
const { DEFAULT_USER_SETTINGS, DISTRICT_MAPPINGS, PETS_MAPPINGS } = require('./config');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–¥—É–±–ª—é—î–º–æ –∑ bot.js –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ)
function formatSettings(settings) {
  const s = { ...DEFAULT_USER_SETTINGS, ...settings }; // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –≤—Å—ñ –ø–æ–ª—è —î

  return `
üèôÔ∏è *–ú—ñ—Å—Ç–æ:* ${s.city ? s.city.charAt(0).toUpperCase() + s.city.slice(1) : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üèòÔ∏è *–†–∞–π–æ–Ω:* ${s.district ? s.district.charAt(0).toUpperCase() + s.district.slice(1) : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üí∏ *–ú—ñ–Ω. —Ü—ñ–Ω–∞:* ${s.minPrice > 0 ? s.minPrice : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üí∞ *–ú–∞–∫—Å. —Ü—ñ–Ω–∞:* ${s.maxPrice > 0 ? s.maxPrice : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üîë *–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:* ${s.keywords.length > 0 ? s.keywords.join(', ') : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚¨ÜÔ∏è *–ú–∞–∫—Å. –ø–æ–≤–µ—Ä—Ö:* ${s.maxFloor > 0 ? s.maxFloor : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}
üìê *–ú—ñ–Ω. –ø–ª–æ—â–∞:* ${s.minArea > 0 ? s.minArea : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}
üêæ *–¢–≤–∞—Ä–∏–Ω–∏:* ${s.petsAllowed.length > 0 ? s.petsAllowed.map(p => p.charAt(0).toUpperCase() + p.slice(1)).join(', ') : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}
`.trim();
}

const SETTINGS_STEPS = {
  MAIN_MENU: 'main_menu',
  CITY: 'city',
  DISTRICT: 'district',
  MIN_PRICE: 'min_price',
  MAX_PRICE: 'max_price',
  KEYWORDS: 'keywords',
  MAX_FLOOR: 'max_floor',
  MIN_AREA: 'min_area',
  PETS: 'pets',
};

const filterWizard = new Scenes.WizardScene(
  'filter-wizard',
  // –ö—Ä–æ–∫ 1: –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  async (ctx) => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö
    ctx.session.tempSettings = { ...(ctx.scene.state.userSettings || DEFAULT_USER_SETTINGS) };

    await ctx.reply(
      `‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤:*\n\n${formatSettings(ctx.session.tempSettings)}\n\n` +
      `–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üèôÔ∏è –ú—ñ—Å—Ç–æ', SETTINGS_STEPS.CITY)],
        [Markup.button.callback('üèòÔ∏è –†–∞–π–æ–Ω', SETTINGS_STEPS.DISTRICT)],
        [Markup.button.callback('üí∏ –ú—ñ–Ω. —Ü—ñ–Ω–∞', SETTINGS_STEPS.MIN_PRICE), Markup.button.callback('üí∞ –ú–∞–∫—Å. —Ü—ñ–Ω–∞', SETTINGS_STEPS.MAX_PRICE)],
        [Markup.button.callback('üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞', SETTINGS_STEPS.KEYWORDS)],
        [Markup.button.callback('‚¨ÜÔ∏è –ú–∞–∫—Å. –ø–æ–≤–µ—Ä—Ö', SETTINGS_STEPS.MAX_FLOOR), Markup.button.callback('üìê –ú—ñ–Ω. –ø–ª–æ—â–∞', SETTINGS_STEPS.MIN_AREA)],
        [Markup.button.callback('üêæ –¢–≤–∞—Ä–∏–Ω–∏', SETTINGS_STEPS.PETS)],
        [Markup.button.callback('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤–∏–π—Ç–∏', 'save_and_exit'), Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_wizard')],
      ]).resize()
    );
    return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ (–¥–µ —á–µ–∫–∞—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)
  },

  // –ö—Ä–æ–∫ 2: –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É
  async (ctx) => {
    if (!ctx.callbackQuery) {
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ –Ω–∞ –º–µ–Ω—é
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.');
      return ctx.wizard.selectStep(0); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ü–µ–Ω–∏
    }

    ctx.answerCbQuery(); // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callbackQuery, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –∑ –∫–Ω–æ–ø–∫–∏

    const action = ctx.callbackQuery.data;

    switch (action) {
      case SETTINGS_STEPS.CITY:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–∏—ó–≤"):');
        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
      case SETTINGS_STEPS.DISTRICT:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ä–∞–π–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–î–∞—Ä–Ω–∏—Ü—å–∫–∏–π"). –ù–∞—Ä–∞–∑—ñ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ —Ä–∞–π–æ–Ω–∏ –ö–∏—î–≤–∞. –ó–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
        return ctx.wizard.selectStep(3); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è —Ä–∞–π–æ–Ω—É
      case SETTINGS_STEPS.MIN_PRICE:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "10000"). –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
        return ctx.wizard.selectStep(4); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω. —Ü—ñ–Ω–∏
      case SETTINGS_STEPS.MAX_PRICE:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "20000"). –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
        return ctx.wizard.selectStep(5); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å. —Ü—ñ–Ω–∏
      case SETTINGS_STEPS.KEYWORDS:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—Ä–µ–º–æ–Ω—Ç, –±–∞–ª–∫–æ–Ω"). –ó–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
        return ctx.wizard.selectStep(6); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
      case SETTINGS_STEPS.MAX_FLOOR:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ–≤–µ—Ä—Ö (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "9"). –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
        return ctx.wizard.selectStep(7); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å. –ø–æ–≤–µ—Ä—Ö—É
      case SETTINGS_STEPS.MIN_AREA:
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –ø–ª–æ—â—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "38"). –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
        return ctx.wizard.selectStep(8); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω. –ø–ª–æ—â—ñ
      case SETTINGS_STEPS.PETS:
        await ctx.reply(
          '–û–±–µ—Ä—ñ—Ç—å –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞). –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏", –∫–æ–ª–∏ –æ–±–µ—Ä–µ—Ç–µ –≤—Å–µ.\n\n_–ü–æ—Ç–æ—á–Ω—ñ: ' +
          (ctx.session.tempSettings.petsAllowed.length > 0 ? ctx.session.tempSettings.petsAllowed.map(p => p.charAt(0).toUpperCase() + p.slice(1)).join(', ') : '–ù–µ–º–∞—î') + '_',
          Markup.inlineKeyboard([
            [Markup.button.callback('üêà –ö—ñ—Ç', 'add_pet_cat'), Markup.button.callback('üêï –°–æ–±–∞–∫–∞', 'add_pet_dog')],
            [Markup.button.callback('üêá –Ü–Ω—à—ñ —Ç–≤–∞—Ä–∏–Ω–∏', 'add_pet_other'), Markup.button.callback('‚ùå –û—á–∏—Å—Ç–∏—Ç–∏', 'clear_pets')],
            [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ç–≤–∞—Ä–∏–Ω', 'finish_pets')],
          ]).resize()
        );
        return ctx.wizard.selectStep(9); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –≤–∏–±–æ—Ä—É —Ç–≤–∞—Ä–∏–Ω
      case 'save_and_exit':
        ctx.scene.state.saveSettings(ctx.session.tempSettings); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ bot.js
        await ctx.reply(`‚úÖ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!* üéØ\n${formatSettings(ctx.session.tempSettings)}`, { parse_mode: 'Markdown' });
        return ctx.scene.leave();
      case 'cancel_wizard':
        await ctx.reply('‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
        return ctx.scene.leave();
      default:
        await ctx.reply('–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.');
        return ctx.wizard.selectStep(0);
    }
  },

  // –ö—Ä–æ–∫ 3: –í–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.');
      return; // –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –Ω–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ
    }
    const city = ctx.message.text.trim();
    ctx.session.tempSettings.city = city;
    await ctx.reply(`–ú—ñ—Å—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *${city}*`, { parse_mode: 'Markdown' });
    return ctx.wizard.selectStep(0); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
  },

  // –ö—Ä–æ–∫ 4: –í–≤–µ–¥–µ–Ω–Ω—è —Ä–∞–π–æ–Ω—É
  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ä–∞–π–æ–Ω—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è.');
      return;
    }
    const districtInput = ctx.message.text.trim();
    if (districtInput === '0' || districtInput === '') {
      ctx.session.tempSettings.district = '';
      await ctx.reply('–†–∞–π–æ–Ω –æ—á–∏—â–µ–Ω–æ.');
    } else {
      const normalizedDistrict = districtInput.toLowerCase();
      if (DISTRICT_MAPPINGS[normalizedDistrict]) {
        ctx.session.tempSettings.district = normalizedDistrict;
        await ctx.reply(`–†–∞–π–æ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *${districtInput}*`, { parse_mode: 'Markdown' });
      } else {
        await ctx.reply('–ù–∞—Ä–∞–∑—ñ —Ü–µ–π —Ä–∞–π–æ–Ω –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∞–±–æ –Ω–∞–∑–≤–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ä–∞–π–æ–Ω –ö–∏—î–≤–∞ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º.');
        return; // –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –Ω–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ
      }
    }
    return ctx.wizard.selectStep(0);
  },

  // –ö—Ä–æ–∫ 5: –í–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω. —Ü—ñ–Ω–∏
  async (ctx) => {
    if (!ctx.message || !ctx.message.text || isNaN(parseInt(ctx.message.text.trim()))) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏. –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è.');
      return;
    }
    const price = parseInt(ctx.message.text.trim());
    ctx.session.tempSettings.minPrice = price;
    await ctx.reply(`–ú—ñ–Ω. —Ü—ñ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *${price > 0 ? price : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}*`, { parse_mode: 'Markdown' });
    return ctx.wizard.selectStep(0);
  },

  // –ö—Ä–æ–∫ 6: –í–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å. —Ü—ñ–Ω–∏
  async (ctx) => {
    if (!ctx.message || !ctx.message.text || isNaN(parseInt(ctx.message.text.trim()))) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏. –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è.');
      return;
    }
    const price = parseInt(ctx.message.text.trim());
    ctx.session.tempSettings.maxPrice = price;
    await ctx.reply(`–ú–∞–∫—Å. —Ü—ñ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *${price > 0 ? price : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}*`, { parse_mode: 'Markdown' });
    return ctx.wizard.selectStep(0);
  },

  // –ö—Ä–æ–∫ 7: –í–≤–µ–¥–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è.');
      return;
    }
    const keywordsInput = ctx.message.text.trim();
    if (keywordsInput === '0' || keywordsInput === '') {
      ctx.session.tempSettings.keywords = [];
      await ctx.reply('–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω–æ.');
    } else {
      ctx.session.tempSettings.keywords = keywordsInput.split(',').map(k => k.trim()).filter(k => k.length > 0);
      await ctx.reply(`–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *${ctx.session.tempSettings.keywords.join(', ')}*`, { parse_mode: 'Markdown' });
    }
    return ctx.wizard.selectStep(0);
  },

  // –ö—Ä–æ–∫ 8: –í–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å. –ø–æ–≤–µ—Ä—Ö—É
  async (ctx) => {
    if (!ctx.message || !ctx.message.text || isNaN(parseInt(ctx.message.text.trim()))) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—É. –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è.');
      return;
    }
    const floor = parseInt(ctx.message.text.trim());
    ctx.session.tempSettings.maxFloor = floor;
    await ctx.reply(`–ú–∞–∫—Å. –ø–æ–≤–µ—Ä—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *${floor > 0 ? floor : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}*`, { parse_mode: 'Markdown' });
    return ctx.wizard.selectStep(0);
  },

  // –ö—Ä–æ–∫ 9: –í–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω. –ø–ª–æ—â—ñ
  async (ctx) => {
    if (!ctx.message || !ctx.message.text || isNaN(parseInt(ctx.message.text.trim()))) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –ø–ª–æ—â—ñ. –í–≤–µ–¥—ñ—Ç—å "0" –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è.');
      return;
    }
    const area = parseInt(ctx.message.text.trim());
    ctx.session.tempSettings.minArea = area;
    await ctx.reply(`–ú—ñ–Ω. –ø–ª–æ—â–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *${area > 0 ? area : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}*`, { parse_mode: 'Markdown' });
    return ctx.wizard.selectStep(0);
  },

  // –ö—Ä–æ–∫ 10: –í–∏–±—ñ—Ä —Ç–≤–∞—Ä–∏–Ω
  async (ctx) => {
    if (!ctx.callbackQuery) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–≤–∞—Ä–∏–Ω.');
      return;
    }
    ctx.answerCbQuery();
    const action = ctx.callbackQuery.data;

    const currentPets = ctx.session.tempSettings.petsAllowed;

    switch (action) {
      case 'add_pet_cat':
        if (!currentPets.includes('–∫—ñ—Ç')) currentPets.push('–∫—ñ—Ç');
        break;
      case 'add_pet_dog':
        if (!currentPets.includes('—Å–æ–±–∞–∫–∞')) currentPets.push('—Å–æ–±–∞–∫–∞');
        break;
      case 'add_pet_other':
        if (!currentPets.includes('—ñ–Ω—à—ñ')) currentPets.push('—ñ–Ω—à—ñ');
        break;
      case 'clear_pets':
        ctx.session.tempSettings.petsAllowed = [];
        await ctx.reply('–§—ñ–ª—å—Ç—Ä "–¢–≤–∞—Ä–∏–Ω–∏" –æ—á–∏—â–µ–Ω–æ.');
        return ctx.wizard.selectStep(0); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
      case 'finish_pets':
        await ctx.reply(`–§—ñ–ª—å—Ç—Ä "–¢–≤–∞—Ä–∏–Ω–∏" –æ–Ω–æ–≤–ª–µ–Ω–æ: *${currentPets.length > 0 ? currentPets.map(p => p.charAt(0).toUpperCase() + p.slice(1)).join(', ') : '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}*`, { parse_mode: 'Markdown' });
        return ctx.wizard.selectStep(0); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      default:
        await ctx.reply('–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.');
        break;
    }

    ctx.session.tempSettings.petsAllowed = currentPets;

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é —Ç–≤–∞—Ä–∏–Ω
    await ctx.editMessageText(
      '–û–±–µ—Ä—ñ—Ç—å –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞). –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏", –∫–æ–ª–∏ –æ–±–µ—Ä–µ—Ç–µ –≤—Å–µ.\n\n_–ü–æ—Ç–æ—á–Ω—ñ: ' +
      (ctx.session.tempSettings.petsAllowed.length > 0 ? ctx.session.tempSettings.petsAllowed.map(p => p.charAt(0).toUpperCase() + p.slice(1)).join(', ') : '–ù–µ–º–∞—î') + '_',
      Markup.inlineKeyboard([
        [Markup.button.callback('üêà –ö—ñ—Ç', 'add_pet_cat'), Markup.button.callback('üêï –°–æ–±–∞–∫–∞', 'add_pet_dog')],
        [Markup.button.callback('üêá –Ü–Ω—à—ñ —Ç–≤–∞—Ä–∏–Ω–∏', 'add_pet_other'), Markup.button.callback('‚ùå –û—á–∏—Å—Ç–∏—Ç–∏', 'clear_pets')],
        [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ç–≤–∞—Ä–∏–Ω', 'finish_pets')],
      ]).resize()
    );
  }
);

module.exports = {
  filterWizard,
  formatSettings, // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ bot.js
};