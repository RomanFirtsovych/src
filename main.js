const { Telegraf } = require('telegraf');
const puppeteer = require('puppeteer');
const dotenv = require('dotenv');
const fs = require('fs');

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

const SUBSCRIBERS_FILE = 'subscribers.json';
const PROCESSED_ADS_FILE = 'processedAds.json';

let subscribers = loadJSON(SUBSCRIBERS_FILE, []);
let processedAds = new Set(loadJSON(PROCESSED_ADS_FILE, []));

// üõ†Ô∏è –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON
function loadJSON(file, defaultValue) {
    if (fs.existsSync(file)) {
        try {
            return JSON.parse(fs.readFileSync(file, 'utf-8'));
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è ${file}:`, error);
        }
    }
    return defaultValue;
}

// üíæ –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON
function saveJSON(file, data) {
    try {
        fs.writeFileSync(file, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É ${file}:`, error);
    }
}

// ‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (–Ω–µ —Å—Ç–∞—Ä—à–µ 2 –¥–Ω—ñ–≤)
function isRecentlyPublished(timeText) {
    if (!timeText) return false;
    if (timeText.includes('–©–æ–π–Ω–æ')) return true;

    const minutesMatch = timeText.match(/(\d+)\s*—Ö–≤/);
    if (minutesMatch) return parseInt(minutesMatch[1], 10) <= 2880;

    const hoursMatch = timeText.match(/(\d+)\s*–≥–æ–¥/);
    if (hoursMatch) return parseInt(hoursMatch[1], 10) <= 48;

    const daysMatch = timeText.match(/(\d+)\s*–¥–Ω/);
    if (daysMatch) return parseInt(daysMatch[1], 10) <= 2;

    return false;
}

// üîç –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ OLX
async function getOlxListings() {
    console.log('üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ OLX...');
    let browser;

    try {
        browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
        });

        const page = await browser.newPage();
        await page.goto('https://www.olx.ua/uk/nedvizhimost/arenda-kvartir/', { waitUntil: 'domcontentloaded', timeout: 60000 });

        await page.waitForSelector('div[data-cy="l-card"]', { timeout: 5000 });

        let listings = await page.evaluate(() => {
            return Array.from(document.querySelectorAll('div[data-cy="l-card"]')).map(el => {
                const title = el.querySelector('h6')?.innerText || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
                const price = el.querySelector('p')?.innerText || '–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
                const link = el.querySelector('a')?.href || '#';
                const locationText = el.querySelector('p[data-testid="location-date"]')?.innerText || '';
                const description = el.querySelector('span[data-testid="ad-description"]')?.innerText || '';

                let locationParts = locationText.split(',');
                let city = locationParts.length > 0 ? locationParts[0].trim() : '';
                let district = locationParts.length > 1 ? locationParts[1].trim() : '';

                return { id: link, title, price, link, city, district, description, timeText: locationText };
            });
        });

        console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${listings.length} –æ–≥–æ–ª–æ—à–µ–Ω—å`);

        let newListings = listings.filter(ad => !processedAds.has(ad.id));

        console.log(`üÜï –ù–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${newListings.length}`);

        let filteredListings = [];
        for (let ad of newListings) {
            if (processedAds.has(ad.id)) continue;
            if (ad.city.toLowerCase() !== '–∫–∏—ó–≤') continue;
            if (!ad.district.toLowerCase().includes('–¥–∞—Ä–Ω–∏—Ü—å–∫–∏–π')) continue;
            if (!isRecentlyPublished(ad.timeText)) continue;

            filteredListings.push(ad);
            processedAds.add(ad.id);
        }

        saveJSON(PROCESSED_ADS_FILE, [...processedAds]);

        return filteredListings;

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å:', error);
        return [];
    } finally {
        if (browser) await browser.close();
    }
}

// üì© –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å
async function sendListings() {
    const listings = await getOlxListings();

    if (listings.length === 0) {
        console.log('‚ùó –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å');
        return;
    }

    if (subscribers.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.');
        return;
    }

    listings.forEach(ad => {
        subscribers.forEach(userId => {
            bot.telegram.sendMessage(
                userId,
                `üè° *${ad.title}*\nüìç *${ad.city}, ${ad.district}*\n‚è≥ *${ad.timeText}*\nüí∞ ${ad.price}\nüîó [–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ](${ad.link})`,
                { parse_mode: 'Markdown' }
            ).catch(error => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error));
        });
    });

    console.log(`üì© –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${listings.length} –æ–≥–æ–ª–æ—à–µ–Ω—å`);
}

// üîÅ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
setInterval(sendListings, 30000);

// üì¢ –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
    const userId = ctx.message.chat.id;
    if (!subscribers.includes(userId)) {
        subscribers.push(userId);
        saveJSON(SUBSCRIBERS_FILE, subscribers);
        ctx.reply('‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!');
    } else {
        ctx.reply('‚ùó –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.');
    }
});

bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
